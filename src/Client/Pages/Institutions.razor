@page "/settings/Institutions"
@using Radzen
@using Radzen.Blazor
@inject DialogService DialogService
@inject HttpClient Http
@using Client.Components.Dialogs
@using Client.Services;
@inject InstitutionService InstitutionService
@inject NotificationService NotificationService

@inject NavigationManager Navigation

<h3 style="margin-bottom:35px;">Institutions</h3>
<div class="container">
<RadzenDataGrid TItem="Institution" Data="@institutions" @ref="grid"
                    AllowPaging="true" PageSize="10" AllowSorting="true" PagerHorizontalAlign="Radzen.HorizontalAlign.Center">
    <Columns>
        <RadzenDataGridColumn TItem="Institution" Property="INSTITUTION_CODE" Title="Code"  width="200px"/>
            <RadzenDataGridColumn TItem="Institution" Property="INSTITUTION_NAME" Title="Name" Width="580px" />
        @* <RadzenDataGridColumn TItem="Institution" Property="DD_VENDOR_ID_NUM" Title="Vendor ID" /> *@
        @* <RadzenDataGridColumn TItem="Institution" Property="AFFINITY_DB_NAME" Title="DB Name" /> *@
        @* <RadzenDataGridColumn TItem="Institution" Property="DD_SEND_REPORT_TO" Title="Send Report To" /> *@
        <RadzenDataGridColumn TItem="Institution" Title="Actions" Width="180px">
            <Template Context="record">
                        <div style="display: flex; justify-content: center; align-items: center;">

                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" title="Edit Institutions" Click="@(args => OnEdit(record))" style="margin-right: 6px;" />
                @* <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(args => OnDelete(record))" /> *@
                   </div>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<RadzenNotification />
</div>

<style>
    /* Header font size */
    .rz-datatable-header th,
    .rz-grid-table thead th {
        /* font-size: 20px !important; */
        font-size: 16px !important;
    }

    /* Row content font size */
    .rz-grid-table td,
    .rz-cell-data {
        font-size: 15px !important;
    }

    h3 {
        margin-bottom: -0.9rem;
    }


    .rz-grid-table thead th .rz-column-title-content {
        text-transform: none; /* disables uppercase */
        padding: 4px;
    }
    .container {
        margin-left: 0px;
        padding-left: 0px;
    }
    /* Smaller icon buttons for Actions column */
    .row-actions .rz-button {
        font-size: 0.75rem !important;
        padding: 4px 8px !important;
        min-width: auto !important;
        height: 32px !important;
    }

        .row-actions .rz-button .rz-button-icon {
            font-size: 12px !important;
        }
    /* All Radzen DataGrid header titles */
    .rz-column-title {
        font-size: 20px !important;
        text-align: center;}
    .rz-grid-table thead th .rz-column-title {
        justify-content: center;
    }

    /* .rz-cell-data { */
    /*     text-align: center; */
    /* } */

    .scrollable-grid {
        overflow-y: auto;
        border: 1px solid #ccc;
        border-radius: 8px;
    }

    .rz-pager-page.rz-state-active {
        color: #1976d2;
    }

    .table-toolbar {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        gap: 10px;
        margin-bottom: 16px;
        flex-wrap: wrap;
    }

    .rz-datagrid {
        font-size: 0.95rem;
    }

    .rz-dialog-overlay {
        background-color: transparent !important;
    }

    a.rz-pager-first, a.rz-pager-prev, a.rz-pager-next, a.rz-pager-last {
        display: none !important;
    }

    .rz-paginator {
        font-size: 0.75rem !important;
        padding: 4px 8px !important;
    }

    /* .rz-pager { */
    /*     justify-content: center !important; */
    /* } */

    .row-actions {
        display: flex;
        justify-content: center;
        gap: 6px;
    }


</style>
@code {
    private List<Institution> institutions = new();
    private RadzenDataGrid<Institution>? grid;

    protected override async Task OnInitializedAsync()
    {
        await LoadInstitutionsAsync();
    }

    private async Task LoadInstitutionsAsync()
    {
        institutions = await InstitutionService.GetAllAsync();
    }

    private async Task OnAdd()
    {
        var result = await DialogService.OpenAsync<EditInstitutionDialog>(
            "Add Institution",
            new Dictionary<string, object> { ["Institution"] = new Institution() },
            new DialogOptions() { Width = "600px", Height = "500px", Resizable = true });

        if (result is Institution)
            await LoadInstitutionsAsync();
    }

    private async Task OnEdit(Institution record)
    {
        var result = await DialogService.OpenAsync<EditInstitutionDialog>(
            "Edit Institution",
            new Dictionary<string, object> { ["Institution"] = record },
            new DialogOptions() { Width = "600px", Height = "500px", Resizable = true });

        if (result is Institution)
            await LoadInstitutionsAsync();
    }

    // private async Task OnDelete(Institution record)
    // {
    //     bool? confirmed = await DialogService.Confirm(
    //         $"Are you sure you want to delete {record.INSTITUTION_CODE}?",
    //         "Delete Confirmation");

    //     if (confirmed == true)
    //     {
    //         bool success = await InstitutionService.DeleteAsync(record.INSTITUTION_ID, "1");
    //         if (success)
    //         {
    //             NotificationService.Notify(new NotificationMessage
    //                 {
    //                     Severity = NotificationSeverity.Success,
    //                     Summary = "Deleted",
    //                     Detail = $"{record.INSTITUTION_CODE} has been deleted.",
    //                     Duration = 4000
    //                 });
    //             await LoadInstitutionsAsync();
    //         }
    //         else
    //         {
    //             NotificationService.Notify(new NotificationMessage
    //                 {
    //                     Severity = NotificationSeverity.Error,
    //                     Summary = "Delete Failed",
    //                     Detail = "The server was unable to delete the record.",
    //                     Duration = 4000
    //                 });
    //         }
    //     }
    // }
}